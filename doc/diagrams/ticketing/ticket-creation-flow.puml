@startuml Ticket Creation Flow
!theme plain
skinparam ActivityBackgroundColor White
skinparam ActivityBorderColor #666666
skinparam ArrowColor #666666
skinparam ActivityDiamondBackgroundColor White
skinparam NoteBackgroundColor #FFFFCC

title Ticket Creation Flow

start

:User sends message\nwith complex request;

:AI analyzes the request;

if (Can AI solve it?) then (Yes)
  :Generates response\nand solves autonomously;
  stop
else (No)
  :AI suggests opening a ticket;
  if (User confirms?) then (No)
    :AI attempts alternative\napproach;
    stop
  else (Yes)
    :User accepts escalation;
  endif
endif

:System invokes openTicket function;

note right
  In openai-handlers.ts
  via executeTool()
end note

:Creating ticket structure\nwith parameters;

note right
  Main parameters:
  - UserId
  - MsgId
  - Problem summary
  - Relevant history
end note

:System executes sendMessageToAdmin;

fork
  :Updates status of original\nmessage (ticketOpen = true);
  note right
    Via updateTicketStatusByMsgId()
    in message repository
  end note
fork again
  :Creates ticket\nin system;
  note right
    Via getOrCreateTicket()
    in ticketsCashe.ts module
  end note
end fork

:System sends notification\nto administrative channels;

fork
  :Telegram notification\nwith interactive buttons;
  note right
    Sent to first admin in
    TelegramAdminIdArray
  end note
fork again
  :Updates web dashboard\nin real time;
  note right
    Through KONSOLEX_ENDPOINT.
    MESSAGES_UPDATE
  end note
end fork

:Confirms ticket opening\nto user;

stop

@enduml
